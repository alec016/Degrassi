plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "me.shedaniel.unified-publishing"
}
architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = file("src/main/resources/degrassi.accesswidener")

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
    }

    def generatedResources = file("src/generated")

    sourceSets {
        main {
            resources {
                srcDirs += generatedResources
            }
        }
    }

    runs {
        data {
            data()

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            programArgs "--mod", "degrassi"
            programArgs "--output", generatedResources.absolutePath
            programArgs "--existing", generatedResources.absolutePath

            mods {
                degrassi {
                    source sourceSets.main
                }
            }
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${project.forge_version}"
    modApi "dev.architectury:architectury-forge:${project.architectury_version}"
    modApi "org.joml:joml:1.10.5"
    modApi "me.shedaniel.cloth:cloth-config:${project.cloth_config_version}"
    modApi "me.shedaniel.cloth:cloth-config-forge:${project.cloth_config_version}"
    modApi "curse.maven:probejs-585406:5054324"

    // common module
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    //JEI 10
    modCompileOnly "mezz.jei:jei-${project.minecraft_version}-common-api:${project.jei_version}"
    modCompileOnly "mezz.jei:jei-${project.minecraft_version}-forge-api:${project.jei_version}"
    modLocalRuntime("mezz.jei:jei-${project.minecraft_version}-forge:${project.jei_version}") { transitive = false }

    // Mekanism
    modLocalRuntime "curse.maven:mekanism-268560:5125665"

    // Jade
    modImplementation "curse.maven:jade-324717:5072729"

    // KubeJS
    modImplementation "dev.latvian.mods:kubejs-forge:${kubejs_version}"
}

processResources {
    inputs.property "version", project.version

    filesMatching(["META-INF/mods.toml", "fabric.mod.json"]) {
        expand "version": project.version,
                "modid": project.modid,
                "mod_version": project.mod_version,
                "mod_name": project.mod_name,
                "mod_description": project.mod_description,
                "author": project.author,
                "icon": project.icon,
                "minecraft_version": project.minecraft_version,
                "architectury_version": project.architectury_version,
                "kubejs_version": project.kubejs_version,
                "cloth_config_version": project.cloth_config_version,
                "fabric_api_version": project.fabric_api_version,
                "fabric_loader_version": project.fabric_loader_version,
                "geckolib_version": project.geckolib_version,
                "jei_version": project.jei_version
    }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}

var CURSE_API_KEY = System.getenv("CURSEFORGE_KEY")
var CURSE_PROJECT_ID = "932731"
var MOD_NAME = "[Forge]Degrassi-${project.minecraft_version}-${project.mod_version}"

unifiedPublishing {
    project {
        displayName = MOD_NAME
        releaseType = "beta"
        if (rootProject.file("CHANGELOG.md").exists()) {
            changelog = rootProject.file("CHANGELOG.md").text
        }
        gameVersions = ["${project.minecraft_version}"]
        gameLoaders = ["forge"]
        mainPublication remapJar


        if (CURSE_API_KEY != null) {
            curseforge {
                token = CURSE_API_KEY
                id = CURSE_PROJECT_ID
                gameVersions.addAll "Java 17"
                relations {
                    depends "architectury-api"
                    depends "cloth-config"
                    depends "geckolib"
                    optional "jei"
                    optional "kubejs"
                }
            }
        }
    }
}